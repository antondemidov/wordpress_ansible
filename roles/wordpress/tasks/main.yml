---

- name: Install prerequisites
  apt: name=aptitude update_cache=yes state=latest force_apt_get=yes
  tags: [ system ]

- name: Install LAMP Packages
  apt: name={{ item }} update_cache=yes state=latest
  loop: [ 'apache2', 'mysql-server', 'python3-pymysql', 'php', 'php-mysql', 'libapache2-mod-php', 'certbot', 'python3-certbot-apache' ]
  tags: [ system ]

- name: Install PHP Extensions
  apt: name={{ item }} update_cache=yes state=latest
  loop: "{{ php_modules }}"
  tags: [ system ]

  # Apache Configuration
- name: Create document root
  file:
    path: "/var/www/{{ item }}"
    state: directory
    owner: "www-data"
    group: "www-data"
    mode: '0755'
  loop: "{{ http_envs }}"
  tags: [ apache ]


- name: Set up Apache main conf
  template:
    src: "files/apache2.conf.j2"
    dest: "/etc/apache2/apache2.conf"
  notify: Reload Apache
  tags: [ apache ]

- name: Set up Apache VirtualHost
  template:
    src: "files/apache.conf.j2"
    dest: "/etc/apache2/sites-available/{{ item }}.{{ domain }}.conf"
  notify: Reload Apache
  loop: "{{ http_envs }}"
  tags: [ apache ]

- name: Disable default Apache site
  shell: /usr/sbin/a2dissite 000-default.conf
  notify: Reload Apache

- name: Enable new sites
  shell: "/usr/sbin/a2ensite {{ item }}.{{ domain }}.conf"
  loop: "{{ http_envs }}"
  notify: Reload Apache
  tags: [ apache ]

- name: Enable rewrite module
  shell: /usr/sbin/a2enmod rewrite
  notify: Reload Apache
  tags: [ apache ]

- name: Disable default Apache site
  shell: /usr/sbin/a2dissite 000-default.conf
  notify: Restart Apache
  tags: [ apache ]

  # MySQL Configuration
- name: Set the root password
  mysql_user:
    name: root
    password: "{{ mysql_root_password }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  tags: [ mysql, mysql-root ]

- name: Remove all anonymous user accounts
  mysql_user:
    name: ''
    host_all: yes
    state: absent
    login_user: root
    login_password: "{{ mysql_root_password }}"
  tags: [ mysql ]

- name: Remove the MySQL test database
  mysql_db:
    name: test
    state: absent
    login_user: root
    login_password: "{{ mysql_root_password }}"
  tags: [ mysql ]

- name: Creates database for WordPress
  mysql_db:
    name: "{{ item }}"
    state: present
    login_user: root
    login_password: "{{ mysql_root_password }}"
  loop: "{{ http_envs }}"
  tags: [ mysql ]

- name: Create MySQL user for WordPress
  mysql_user:
    name: "{{ item }}"
    password: "{{ mysql_password }}"
    priv: "{{ item }}.*:ALL"
    state: present
    login_user: root
    login_password: "{{ mysql_root_password }}"
  loop: "{{ http_envs }}"
  tags: [ mysql ]

  # UFW Configuration
- name: "UFW - Allow HTTP on port {{ http_port }}"
  ufw:
    rule: allow
    port: "{{ http_port }}"
    proto: tcp
  tags: [ system ]

  # WordPress Configuration
- name: Download and unpack latest WordPress
  unarchive:
    src: https://wordpress.org/latest.tar.gz
    dest: "/var/www/{{ item }}"
    remote_src: yes
  loop: "{{ http_envs }}"
  tags: [ wordpress ]

- name: Set ownership
  file:
    path: "/var/www/{{ item }}"
    state: directory
    recurse: yes
    owner: www-data
    group: www-data
  loop: "{{ http_envs }}"
  tags: [ wordpress ]

- name: Set permissions for directories
  shell: "/usr/bin/find /var/www/{{ item }}/ -type d -exec chmod 750 {} \\;"
  loop: "{{ http_envs }}"
  tags: [ wordpress ]

- name: Set permissions for files
  shell: "/usr/bin/find /var/www/{{ item }}/ -type f -exec chmod 640 {} \\;"
  loop: "{{ http_envs }}"
  tags: [ wordpress ]

- name: Set up wp-config
  template:
    src: "files/wp-config.php.j2"
    dest: "/var/www/{{ item }}/wordpress/wp-config.php"
  loop: "{{ http_envs }}"
  tags: [ wordpress ]
